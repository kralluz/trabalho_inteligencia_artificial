#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TRABALHO FINAL - INTELIG√äNCIA ARTIFICIAL
Vers√£o Final Funcional - Detec√ß√£o de Vagas de Estacionamento
Dataset Mesclado Real
"""

import os
import subprocess
import sys
import time

def conf        print("‚úÖ Dataset YOLO novo configurado com sucesso!")
        
        print("\nEste projeto demonstra:")
        print("‚Ä¢ Uso de dataset de alta qualidade com anota√ß√µes precisas")
        print("‚Ä¢ 903 anota√ß√µes de vagas em 30 imagens")
        print("‚Ä¢ Labels profissionais baseados em pol√≠gonos")
        print("‚Ä¢ Detec√ß√£o de vagas de estacionamento em condi√ß√µes reais")
        
        print("\nüéâ SUCESSO TOTAL COM DATASET NOVO DE ALTA QUALIDADE! ‚úì")_local():
    """Configura o dataset YOLO novo (convertido)"""
    print("üöó Configurando dataset YOLO novo (alta qualidade)...")
    
    base_path = os.getcwd()
    dataset_path = os.path.join(base_path, "dataset_yolo_novo")
    yaml_path = os.path.join(dataset_path, "data.yaml")
    
    # Verificar se o dataset existe
    if not os.path.exists(dataset_path):
        print("‚ùå Dataset YOLO novo n√£o encontrado!")
        print("üí° Execute 'python converter_dataset_novo.py' primeiro")
        return None
    
    if not os.path.exists(yaml_path):
        print("‚ùå Arquivo data.yaml n√£o encontrado!")
        print(f"üí° Certifique-se de que '{yaml_path}' existe")
        return None
    
    print(f"‚úÖ Dataset YOLO novo configurado: {dataset_path}")
    print(f"üìÑ Usando configura√ß√£o: {yaml_path}")
    
    # Verificar estrutura do dataset
    for split in ['train', 'val', 'test']:
        img_dir = os.path.join(dataset_path, split, 'images')
        lbl_dir = os.path.join(dataset_path, split, 'labels')
        
        if os.path.exists(img_dir) and os.path.exists(lbl_dir):
            img_count = len([f for f in os.listdir(img_dir) if f.endswith(('.jpg', '.jpeg', '.png'))])
            lbl_count = len([f for f in os.listdir(lbl_dir) if f.endswith('.txt')])
            print(f"  üìÇ {split}: {img_count} imagens, {lbl_count} labels")
        else:
            print(f"  ‚ö†Ô∏è {split}: diret√≥rio n√£o encontrado")
    
    return yaml_path

def main():
    start_time = time.time()
      print("=" * 60)
    print("TRABALHO FINAL - INTELIGENCIA ARTIFICIAL")
    print("Detec√ß√£o de Vagas de Estacionamento com YOLO")
    print("VERS√ÉO FINAL - DATASET NOVO DE ALTA QUALIDADE")
    print("=" * 60)

    print("\n[1/6] Instalando depend√™ncias...")
    # Instalar depend√™ncias necess√°rias
    deps = [
        "pip install ultralytics==8.3.153 --quiet",
        "pip install Pillow numpy matplotlib --quiet"
    ]
    
    for dep in deps:
        try:
            subprocess.run(dep, shell=True, check=True, capture_output=True)
            print(f"‚úì {dep.split()[2]}")
        except:
            print(f"~ {dep.split()[2]} (j√° instalado)")

    print("\n[2/6] Importando bibliotecas...")
    try:
        import numpy as np
        from PIL import Image
        from ultralytics import YOLO
        import torch
        print("‚úì Todas as bibliotecas importadas")
    except ImportError as e:
        print(f"‚úó Erro de importa√ß√£o: {e}")
        return    print("\n[3/6] Configurando dataset YOLO novo (alta qualidade)...")
    try:
        yaml_path = configurar_dataset_local()
        if yaml_path:
            print("‚úÖ Dataset YOLO novo configurado com sucesso")
        else:
            print("‚ùå Erro ao configurar dataset YOLO novo")
            return
    except Exception as e:
        print(f"‚úó Erro ao configurar dataset: {e}")
        return

    print("\n[4/6] Carregando modelo YOLO...")
    try:
        # Tentar carregar modelo pr√©-treinado
        try:
            model = YOLO('yolov8n.pt')
            print("‚úì Modelo pr√©-treinado yolov8n.pt carregado")
        except Exception as e1:
            print(f"~ N√£o foi poss√≠vel carregar yolov8n.pt ({e1}), tentando yolov8n.yaml...")
            try:
                model = YOLO('yolov8n.yaml')
                print("‚úì Modelo criado do zero a partir de yolov8n.yaml")
            except Exception as e2:
                print(f"‚úó Erro ao criar modelo com yolov8n.yaml: {e2}")
                return
    except Exception as e:
        print(f"‚úó Erro fatal ao carregar/criar modelo: {e}")
        return

    print("\n[5/6] Treinando modelo...")
    try:
        print("Iniciando treinamento (pode demorar alguns minutos)...")
        
        # Limpar projetos anteriores
        import shutil
        if os.path.exists('projeto_final'):
            print("Removendo treinamento anterior...")
            shutil.rmtree('projeto_final')
        
        # Configura√ß√µes de treinamento otimizadas
        results = model.train(
            data=yaml_path,
            epochs=100,          # √âpocas reduzidas para teste
            batch=4,            # Batch size moderado
            imgsz=416,          # Resolu√ß√£o padr√£o
            device='cpu',       # CPU para compatibilidade
            project='projeto_final',
            name='yolo_vagas',
            exist_ok=True,
            pretrained=True,
            optimizer='auto',
            verbose=True,
            seed=0,
            deterministic=True,
            patience=15,        # Early stopping
            save_period=10,     # Salvar checkpoints a cada 10 √©pocas
            val=True,
            cache=False
        )
        print(f"‚úì Treinamento conclu√≠do! Resultados salvos em: {results.save_dir}")
        
    except Exception as e:
        print(f"‚úó Erro no treinamento: {e}")
        print("Detalhes do erro:")
        import traceback
        traceback.print_exc()
        print("Continuando com valida√ß√£o...")

    print("\n[6/6] Testando modelo...")
    model_path_best = os.path.join('projeto_final', 'yolo_vagas', 'weights', 'best.pt')
    model_path_last = os.path.join('projeto_final', 'yolo_vagas', 'weights', 'last.pt')
    
    loaded_model = None
    if os.path.exists(model_path_best):
        try:
            loaded_model = YOLO(model_path_best)
            print(f"‚úì Modelo treinado carregado: {model_path_best}")
        except Exception as e_best:
            print(f"~ Problema ao carregar best.pt ({e_best}), tentando last.pt...")
            if os.path.exists(model_path_last):
                try:
                    loaded_model = YOLO(model_path_last)
                    print(f"‚úì Modelo treinado carregado: {model_path_last}")
                except Exception as e_last:
                    print(f"~ Erro ao carregar last.pt ({e_last}). Teste abortado.")
    elif os.path.exists(model_path_last):
        try:
            loaded_model = YOLO(model_path_last)
            print(f"‚úì Modelo treinado carregado: {model_path_last}")
        except Exception as e_last:
            print(f"~ Erro ao carregar last.pt ({e_last}). Teste abortado.")
    else:
        print("~ Nenhum modelo treinado encontrado. Teste abortado.")

    if loaded_model:
        try:
            # Diret√≥rio de teste
            test_images_dir = os.path.join(os.path.dirname(yaml_path), 'test', 'images')
            
            # Criar diret√≥rio para resultados da infer√™ncia
            results_dir = "resultados/predicoes_finais"
            os.makedirs(results_dir, exist_ok=True)
            
            print(f"Realizando infer√™ncia nas imagens de teste em: {test_images_dir}")
            print(f"Resultados ser√£o salvos em: {results_dir}")
            
            # Realizar predi√ß√µes
            results_pred = loaded_model.predict(
                source=test_images_dir,
                save=True,
                project="resultados",
                name="predicoes_finais",
                exist_ok=True,
                conf=0.3,  # Confian√ßa m√≠nima
                iou=0.5    # IoU para NMS
            )
            print(f"‚úì Teste conclu√≠do! {len(results_pred)} imagens processadas.")
            
        except Exception as e:
            print(f"~ Erro no teste: {e}")
            import traceback
            traceback.print_exc()
    else:
        print("~ Modelo n√£o carregado, pulando etapa de teste.")

    # Teste final com imagens para infer√™ncia
    print("\n" + "=" * 50)
    print("üöó TESTE FINAL COM IMAGENS DE INFER√äNCIA")
    print("=" * 50)
    
    if loaded_model and os.path.exists('imagens_para_inferencia'):
        try:
            print("Realizando infer√™ncia final...")
            
            inference_results = loaded_model.predict(
                source='imagens_para_inferencia',
                save=True,
                project='teste_final',
                name='inferencia_final',
                exist_ok=True,
                conf=0.25,  # Confian√ßa mais baixa para capturar mais detec√ß√µes
                iou=0.5,
                verbose=True
            )
            
            print(f"‚úì Infer√™ncia final conclu√≠da! {len(inference_results)} imagens processadas.")
            print("üìÅ Resultados salvos em: teste_final/inferencia_final/")
            
            # Analisar resultados
            total_detections = 0
            for result in inference_results:
                if result.boxes is not None:
                    detections = len(result.boxes)
                    total_detections += detections
                    print(f"  üì∏ {os.path.basename(result.path)}: {detections} vagas detectadas")
            
            print(f"üìä Total de detec√ß√µes: {total_detections}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na infer√™ncia final: {e}")

    # Resumo final
    end_time = time.time()
    duration = (end_time - start_time) / 60
    
    print("\n" + "=" * 60)
    print("PROJETO CONCLU√çDO!")
    print("=" * 60)
    print(f"Tempo total: {duration:.1f} minutos")
    
    if os.path.exists('projeto_final'):
        print("\nArquivos criados:")
        print("‚úì dataset_mesclado/ - Dataset com imagens REAIS mescladas")
        print("‚úì projeto_final/ - Modelo treinado")
        if os.path.exists('resultados'):
            print("‚úì resultados/ - Predi√ß√µes do teste")
        if os.path.exists('teste_final'):
            print("‚úì teste_final/ - Infer√™ncia final")
        
        print("\nEste projeto demonstra:")
        print("‚Ä¢ Uso de dataset real mesclado de m√∫ltiplas fontes")
        print("‚Ä¢ Treinamento de modelo YOLO com dados reais")
        print("‚Ä¢ Valida√ß√£o e teste do modelo")
        print("‚Ä¢ Detec√ß√£o de vagas de estacionamento em condi√ß√µes reais")
        
        print("\nüéâ SUCESSO TOTAL COM DATASET REAL MESCLADO! ‚úì")
    else:
        print("Projeto executado com limita√ß√µes")

if __name__ == "__main__":
    main()
